// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  marketingEmails Boolean   @default(false)
  role            Role      @default(CUSTOMER)
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  orders          Order[]
  cartItems       CartItem[]
  reviews         ProductReview[]
  
  @@map("users")
}

model Product {
  id             String    @id @default(cuid())
  name           String
  description    String?
  price          Float
  originalPrice  Float?
  image          String?
  images         Json?     // JSON array of image URLs
  category       String
  subcategory    String?
  brand          String?
  sku            String?   @unique
  stock          Int       @default(0)
  minStock       Int       @default(5)
  isActive       Boolean   @default(true)
  isFeatured     Boolean   @default(false)
  isBestSeller   Boolean   @default(false)
  isNewArrival   Boolean   @default(false)
  rating         Float?    @default(0)
  reviewCount    Int       @default(0)
  weight         Float?
  dimensions     String?
  tags           Json?     // JSON array of tags
  metaTitle      String?
  metaDescription String?
  sortOrder      Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        ProductReview[]
  
  @@index([category])
  @@index([isActive])
  @@index([isFeatured])
  @@index([isBestSeller])
  @@index([isNewArrival])
  @@map("products")
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  userId    String
  productId String
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  currency        String      @default("USD")
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress Json
  billingAddress  Json?
  notes           String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  
  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// New Product Review model
model ProductReview {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  userId    String
  productId String
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@map("product_reviews")
}

enum Role {
  ADMIN
  CUSTOMER
  MODERATOR
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
